{"version":3,"sources":["global/Button.tsx","hooks/useOutsideClicked.tsx","global/Modal.tsx","components/modals/AddListModal.tsx","views/GroceryLists.tsx","components/lists/GroceryEditListItem.tsx","types/IGroceryListItem.ts","data/dataProvider.ts","data/categoryDataProvider.ts","views/EditGroceryList.tsx","components/lists/ShopGroceryListItem.tsx","views/ShopGroceryList.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["Button","children","clickHandler","type","onClickHandler","buttonClasses","className","onClick","useOutsideClicked","ref","handler","useEffect","document","addEventListener","event","current","contains","target","removeEventListener","handleClickOutside","Modal","modalTitle","closeHandler","modalRef","useRef","style","backgroundColor","AddListModal","addListHandler","useState","name","setName","errorMessage","setErrorMessage","submitListHandler","preventDefault","newNameRef","focus","onSubmit","htmlFor","id","defaultValue","onChange","e","value","GroceryLists","lists","deleteListHandler","length","map","list","index","to","GroceryEditListItem","GroceryCategory","listCategories","listId","listItem","deleteHandler","updateHandler","item","setItem","category","setCategory","itemName","acquired","itemCategory","listCategory","getLists","listKeys","Object","keys","localStorage","filter","includes","listKey","rawData","getItem","JSON","parse","sort","a","b","getList","updateList","listData","newListObject","items","stringify","dataProvider","addList","listName","newListId","splice","newList","removeListItem","listItemId","listItems","addNewListItem","push","Miscellaneous","updateListItem","updatedItem","listItemIndex","findIndex","clearLists","clear","removeList","removeItem","categoryDataProvider","getCategories","types","EditGroceryList","useParams","parseInt","currentList","setCurrentList","setListItems","lastItemRow","querySelector","scrollIntoView","behavior","itemId","updatedList","updatedListId","body","ShopGroceryListItem","setAcquired","itemStyle","textDecoration","fontStyle","color","acquiredStatus","onChangeHandler","quantity","ShopGroceryList","allCategories","visibleCategory","setVisibleCategory","updateListId","formatGroceryListItems","groceryItems","cat","index_2","App","modalOpen","setModalOpen","savedLists","setLists","exact","path","updatedLists","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gOAsCeA,MA9Bf,YAA+E,IAA7DC,EAA4D,EAA5DA,SAAUC,EAAkD,EAAlDA,aAAkD,IAApCC,KAClCC,EAAiBF,EAEnBG,EACF,uEAEF,YAN4E,MAA7B,UAA6B,GAO1E,IAAK,UACHA,GAAiB,+CACjB,MAEF,IAAK,QACHA,GAAiB,2CACjB,MAEF,IAAK,UACHA,GAAiB,6CAOrB,OACE,wBAAQC,UAAWD,EAAeE,QAASH,EAA3C,gBACGH,QADH,IACGA,IAAY,WCLJO,EA1BW,SACxBC,EACAC,GAEAC,qBAAU,WAaR,OANAC,SAASC,iBAAiB,aAAa,SAACC,GAClCL,EAAIM,UAAYN,EAAIM,QAAQC,SAASF,EAAMG,SAC7CP,OAIG,WAELE,SAASM,oBAAoB,aAAa,SAACJ,GAAD,OAd5C,SAA4BA,GACtBL,EAAIM,UAAYN,EAAIM,QAAQC,SAASF,EAAMG,SAC7CP,IAaAS,CAAmBL,SAGtB,CAACL,EAAKC,KCaIU,MA5Bf,YAIoB,IAHlBnB,EAGiB,EAHjBA,SAGiB,IAFjBoB,kBAEiB,MAFJ,cAEI,EADjBC,EACiB,EADjBA,aAEMC,EAAWC,iBAAuB,MAIxC,OAFAhB,EAAkBe,EAAUD,GAG1B,qBACEhB,UAAU,+CACVmB,MAAO,CAAEC,gBAAiB,iBAF5B,SAIE,sBACEjB,IAAKc,EACLjB,UAAU,kFAFZ,UAIE,sBAAKA,UAAU,yCAAf,UACE,mBAAGA,UAAU,YAAb,SAA0Be,IAC1B,cAAC,IAAD,CAAOf,UAAU,MAAMC,QAAS,kBAAMe,UAEvCrB,QC8BM0B,MArDf,YAAyE,IAAjDL,EAAgD,EAAhDA,aAAcM,EAAkC,EAAlCA,eACpC,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KAEA,SAASC,EAAkBpB,GACzBA,EAAMqB,iBAEDL,GAKLF,EAAeE,GACfR,KALEW,EAAgB,uBAQpB,IAAMG,EAAaZ,iBAAyB,MAQ5C,OANAb,qBAAU,WACqB,OAAvByB,EAAWrB,SACXqB,EAAWrB,QAAQsB,UAExB,IAGD,eAAC,EAAD,CAAOf,aAAcA,EAAcD,WAAW,iBAA9C,UACGW,GACC,qBAAK1B,UAAU,yCAAf,SACG0B,IAGL,uBAAMM,SAAUJ,EAAhB,UACE,gCACE,uBAAOK,QAAQ,YAAf,yBACA,uBACE9B,IAAK2B,EACLI,GAAG,YACHC,aAAcX,EACdY,SAAU,SAACC,GAAD,OAAOZ,EAAQY,EAAE1B,OAAO2B,QAClCtC,UAAU,wCACVH,KAAK,YAGT,qBAAKG,UAAU,wBAAf,SACE,cAAC,EAAD,CAAQH,KAAK,UAAUD,aAAcgC,EAArC,iCCGKW,MAzCf,YAAqE,IAA7CC,EAA4C,EAA5CA,MAAOC,EAAqC,EAArCA,kBAC7B,OACE,gCACE,mBAAGzC,UAAU,yBAAb,SACGwC,EAAME,OAAS,EAAI,gBAAkB,iBAGvCF,EAAMG,KAAI,SAACC,EAAMC,GAChB,OACE,sBACE7C,UAAU,8CADZ,UAIE,4BAAI4C,EAAKpB,OACT,sBAAKxB,UAAU,iBAAf,UACE,cAAC,EAAD,CACEH,KAAK,QACLD,aAAc,kBAAM6C,EAAkBG,EAAKV,KAF7C,SAIE,cAAC,IAAD,CAAWlC,UAAU,UAGvB,cAAC,IAAD,CAAM8C,GAAE,iBAAYF,EAAKV,IAAzB,SACE,cAAC,EAAD,CAAQrC,KAAK,UAAb,SACE,cAAC,IAAD,CAAYG,UAAU,YAI1B,cAAC,IAAD,CAAM8C,GAAE,sBAAiBF,EAAKV,IAA9B,SACE,cAAC,EAAD,CAAQrC,KAAK,UAAb,SACE,cAAC,IAAD,CAAkBG,UAAU,iBArBpC,gBAEgB6C,W,QCsCXE,ICzDHC,EDyDGD,EAnDf,YAAkH,IAAD,IAAlFE,EAAkF,EAAlFA,eAAgBC,EAAkE,EAAlEA,OAAQC,EAA0D,EAA1DA,SAAUC,EAAgD,EAAhDA,cAAeC,EAAiC,EAAjCA,cAC5E,EAAwB9B,mBAAQ,UAAC4B,EAASG,YAAV,QAAkB,IAAlD,mBAAOA,EAAP,KAAaC,EAAb,KACA,EAAgChC,mBAAQ,UAAkB4B,EAASK,gBAA3B,QAAuC,iBAA/E,mBAAOA,EAAP,KAAiBC,EAAjB,KAYA,OACI,sBAAKzD,UAAU,8BAAf,UACI,qBAAKA,UAAU,YAAf,SACI,sBAAKA,UAAU,SAAf,UACI,uBAAOA,UAAU,YAAYiC,QAAO,eAAUkB,EAASjB,IAAvD,oBACA,uBACIA,GAAE,eAAUiB,EAASjB,IACrBC,aAAcmB,EACdlB,SAAU,SAACC,GAAD,OAlBHqB,EAkB4BrB,EAAE1B,OAAO2B,MAjB5DiB,EAAQG,QACRL,EAAcH,EAAQ,CAAEhB,GAAIiB,EAASjB,GAAIoB,KAAMI,EAAUF,WAAUG,SAAUR,EAASQ,WAF1F,IAA2BD,GAmBP1D,UAAU,oDACVH,KAAK,cAKjB,sBAAKG,UAAU,iCAAf,UACI,qBAAKA,UAAU,UAAf,SACI,wBACIwB,KAAI,mBAAc2B,EAASjB,IAC3BA,GAAE,mBAAciB,EAASjB,IACzBlC,UAAU,yDACVoC,SAAU,SAACC,GAAD,OA1BCuB,EA0B4BvB,EAAE1B,OAAO2B,MAzBhEmB,EAAYG,QACZP,EAAcH,EAAQ,CAAEhB,GAAIiB,EAASjB,GAAIoB,OAAME,SAAUI,EAAcD,SAAUR,EAASQ,WAF9F,IAA+BC,GA2BXtB,MAAOkB,EALX,SAOKP,EAAeN,KAAI,SAACkB,EAAchB,GAAf,OAChB,wBAAyCP,MAAOuB,EAAhD,SAA+DA,GAA/D,UAAgBA,EAAhB,YAAgChB,WAI5C,cAAC,EAAD,CAAQhD,KAAK,QAAQD,aAAc,kBAAMwD,EAAcD,EAASjB,KAAhE,SACI,cAAC,IAAD,CAAWlC,UAAU,iB,iBClD7BgD,K,cAAAA,E,4BAAAA,E,gBAAAA,E,gBAAAA,E,kBAAAA,E,YAAAA,E,+BAAAA,M,KCJZ,IAAMc,EAAW,WACf,IAAIC,EAAWC,OAAOC,KAAKC,cAAcC,QAAO,SAACvB,GAAD,OAC9CA,EAAKwB,SAAS,YAGhB,OAAwB,IAApBL,EAASrB,OACJ,GAGFqB,EACJpB,KAAI,SAAC0B,GAAa,IAAD,EACZC,EAAO,UAAGJ,aAAaK,QAAQF,UAAxB,QAAoC,KAE/C,OAAOG,KAAKC,MAAMH,MAEnBI,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEzC,GAAK0C,EAAE1C,OAGvB2C,EAAU,SAAC3C,GAA8B,IAAD,EACxCoC,EAAO,UAAGJ,aAAaK,QAAb,eAA6BrC,WAAhC,QAAyC,KAEpD,OAAOsC,KAAKC,MAAMH,IAkCdQ,EAAa,SAAC5B,EAAgB6B,GAClC,IAAInC,EAAOiC,EAAQ3B,GAEf8B,EAAa,2BAAQpC,GAASmC,GAOlC,OALAC,EAAcxD,KAAOuD,EAASvD,MAAQoB,EAAKpB,KAC3CwD,EAAcC,MAAQF,EAASE,OAASrC,EAAKqC,MAE7Cf,aAAaX,QAAb,eAA6BX,EAAKV,IAAMsC,KAAKU,UAAUF,IAEhDA,GA8DMG,EAZM,CACnBC,QA5Fc,SAACC,GACf,IAAM7C,EAAQsB,IAEVwB,EAAoB,EAEpB9C,EAAME,OAAS,IAEjB4C,EACE9C,EACGG,KAAI,SAACC,GAAD,OAAUA,EAAKV,MACnBwC,OACAa,QAAQ,EAAG,GAAG,GAAK,GAG1B,IAAMC,EAAwB,CAC5BtD,GAAIoD,EACJ9D,KAAM6D,EACNJ,MAAO,IAKT,OAFAf,aAAaX,QAAb,eAA6B+B,GAAad,KAAKU,UAAUM,IAElD1B,KAuEPA,WACAe,UACAY,eA9BqB,SAACvC,EAAgBwC,GACtC,IAAI9C,EAAOiC,EAAQ3B,GAEfyC,EAAS,YAAO/C,EAAKqC,OAIzB,OAFArC,EAAKqC,MAAQU,EAAUxB,QAAO,SAAChB,GAAD,OAAcA,EAASjB,KAAOwD,KAErDZ,EAAW5B,EAAD,eAAcN,KAwB/BgD,eAhDqB,SAAC1C,GACtB,IAAIN,EAAOiC,EAAQ3B,GAEfyC,EAAS,YAAO/C,EAAKqC,OAWzB,OATAU,EAAUE,KAAK,CACb3D,GAAIyD,EAAUjD,OAAS,EACvBY,KAAM,GACNK,UAAU,EACVH,SAAUR,EAAgB8C,gBAG5BlD,EAAKqC,MAAQU,EAENb,EAAW5B,EAAD,eAAcN,KAmC/BmD,eAtBqB,SAAC7C,EAAgB8C,GACtC,IAAMpD,EAAOiC,EAAQ3B,GAEf+B,EAAK,YAAOrC,EAAKqC,OAEjBgB,EAAgBhB,EAAMiB,WAAU,SAAC5C,GAAD,OAAUA,EAAKpB,KAAO8D,EAAY9D,MAQxE,OANA+C,EAAMgB,GAAN,2BAA4BhB,EAAMgB,IAAmBD,GAErDpD,EAAKqC,MAAQA,EAEbf,aAAaX,QAAb,eAA6BX,EAAKV,IAAMsC,KAAKU,UAAUtC,IAEhDA,GAUPkC,aACAqB,WAvDiB,WACjBjC,aAAakC,SAuDbC,WA3EiB,SAACnD,GAGlB,OAFAgB,aAAaoC,WAAb,eAAgCpD,IAEzBY,MCvCMyC,EAJc,CAC3BC,cAXoB,WACpB,IAAIC,EAAQ,GAEZ,IAAK,IAAMnE,KAASU,EAClByD,EAAMZ,KAAKvD,GAGb,OAAOmE,IC8FMC,MA3Ff,WACI,IAAQxE,EAAOyE,cAAPzE,GACFgB,EAAS0D,SAAS1E,GAExB,EAAsCX,mBAAS4D,EAAaN,QAAQ3B,IAApE,mBAAO2D,EAAP,KAAoBC,EAApB,KACA,EAAkCvF,mBAA6B,IAA/D,mBAAOoE,EAAP,KAAkBoB,EAAlB,KACA,EAA4CxF,mBAASgF,EAAqBC,iBAA1E,mBAAOvD,EAAP,KAkBA,GAlBA,KAEA5C,qBAAU,WACFwG,GACAE,EAAa,YAAIF,EAAY5B,UAElC,CAAC4B,IAEJxG,qBAAU,WACN,GAAIsF,EAAUjD,OAAS,EAAG,CACtB,IAAMsE,EAAc1G,SAAS2G,cAAc,wBAEvCD,GACAA,EAAYE,eAAe,CAAEC,SAAU,cAGhD,CAACxB,KAECkB,EACD,OAAO,KAWX,SAASzD,EAAcgE,GACnB,IAAMC,EAAclC,EAAaM,eAAevC,EAAQkE,GAExDN,EAAeO,GACfN,EAAaM,EAAYpC,OAG7B,SAAS5B,EAAciE,EAAuBhE,GAC1C,IAAM+D,EAAclC,EAAaY,eAAeuB,EAAehE,GAE/DwD,EAAeO,GACfN,EAAaM,EAAYpC,OAO7B,OACE,gCACE,sBAAKjF,UAAU,oBAAf,UACE,qBAAKA,UAAU,QAAf,SACE,cAAC,IAAD,CAAM8C,GAAG,IAAT,SACE,cAAC,IAAD,CAAiB9C,UAAU,YAG/B,mBAAGA,UAAU,2BAAb,SAAyC6G,EAAYrF,UAGvD,sBAAKxB,UAAU,qCAAf,UACwB,IAArB2F,EAAUjD,QAAgB,mBAAG1C,UAAU,OAAb,2BAE1B2F,EAAUhD,KAAI,SAACQ,EAAUN,GAAX,OACb,cAAC,EAAD,CACEI,eAAgBA,EAChBC,OAAQA,EACRG,cAAeA,EACfD,cAAeA,EACfD,SAAUA,GALZ,oBAMoBN,UAIxB,sBAAK7C,UAAU,0DAAf,UACE,cAAC,EAAD,CAAQH,KAAK,UAAUD,aA9B7B,WACIU,SAASiH,KAAKL,eAAe,CAAEC,SAAU,YA6BvC,SACE,cAAC,IAAD,CAAmBnH,UAAU,UAE/B,eAAC,EAAD,CAAQH,KAAK,UAAUD,aAtD7B,WACI,IAAMyH,EAAclC,EAAaS,eAAe1C,GAEhD4D,EAAeO,GACfN,EAAaM,EAAYpC,QAkDvB,UACE,cAAC,IAAD,CAAYjF,UAAU,QADxB,sBCpDKwH,MAjCf,YAAoF,IAAD,EAApDtE,EAAoD,EAApDA,OAAQC,EAA4C,EAA5CA,SAAUE,EAAkC,EAAlCA,cAC/C,EAAwB9B,mBAAQ,OAAC4B,QAAD,IAACA,IAAY,IAA7C,mBAAOG,EAAP,KAAaC,EAAb,KAEA,EAAgChC,mBAAQ,UAAC+B,EAAKK,gBAAN,UAAxC,mBAAOA,EAAP,KAAiB8D,EAAjB,KASIC,EAAoB,CACtBC,eAAgBhE,EAAW,eAAiB,KAC5CiE,UAAWjE,EAAW,SAAW,KACjCkE,MAAOlE,EAAW,iBAAmB,MAGvC,OACE,sBACE3D,UAAU,mCACVmB,MAAOuG,EAFT,UAIE,cAAC,EAAD,CAAQ7H,KAAK,UAAUD,aAAc,kBAlBzC,WACE,IAAMkI,GAAkBnE,EACxB8D,EAAYK,GACZvE,EAAQ,2BAAKD,GAAN,IAAYK,SAAUmE,KAC7BzE,EAAcH,EAAQ,CAAEhB,GAAIiB,EAASjB,GAAIyB,SAAUmE,IAcNC,IAA3C,SACE,cAAC,IAAD,CAAiB/H,UAAU,UAE7B,8BACGsD,EAAK0E,SADR,IACmB1E,EAAKA,YCyEf2E,MAlGf,WACE,IAAQ/F,EAAOyE,cAAPzE,GACFgB,EAAS0D,SAAS1E,GAExB,EAAsCX,mBAAS4D,EAAaN,QAAQ3B,IAApE,mBAAO2D,EAAP,KAAoBC,EAApB,KACA,EAAkCvF,mBAA0D,IAA5F,mBAAOoE,EAAP,KAAkBoB,EAAlB,KAEMmB,EAAgB3B,EAAqBC,gBAE3C,EAA8CjF,mBAAS,OAAvD,mBAAO4G,EAAP,KAAwBC,EAAxB,KAQA,SAAS/E,EAAcgF,EAAsB/E,GAC3C,IAAM+D,EAAclC,EAAaY,eAAesC,EAAc/E,GAE9DwD,EAAeO,GACfiB,EAAuBjB,GAGzB,SAASiB,EAAuB1F,GAC9B,IAEM2F,EAFaL,EAE8DvF,KAAI,SAACa,GAAD,MAAe,CAClGA,WACAyB,MAAOrC,EAAKqC,MAAMd,QAAO,SAACb,GAAD,OAAUA,EAAKE,WAAaA,SAGvDuD,EAAawB,GAGf,OAxBAlI,qBAAU,WACJwG,GACFyB,EAAuBzB,KAExB,CAACA,IAqBF,gCACE,sBAAK7G,UAAU,oBAAf,UACE,qBAAKA,UAAU,QAAf,SACE,cAAC,IAAD,CAAM8C,GAAG,IAAT,SACE,cAAC,IAAD,CAAiB9C,UAAU,YAG/B,oBAAGA,UAAU,0BAAb,sBAAiD6G,EAAYrF,WAE/D,sBAAKxB,UAAU,YAAf,UACE,uBAAOA,UAAU,iBAAiBiC,QAAQ,aAA1C,qBAGA,yBACEjC,UAAU,kCACVwB,KAAK,aACLU,GAAG,aACHI,MAAO6F,EACP/F,SAAU,SAACC,GAAD,OAAO+F,EAAmB/F,EAAE1B,OAAO2B,QAL/C,UAOE,wBAAQA,MAAM,MAAd,iBACC4F,EAAcvF,KAAI,SAAC6F,EAAK3F,GAAN,OACjB,wBAAQP,MAAOkG,EAAf,SACGA,GADH,mBAAqC3F,aAM3C,sBAAK7C,UAAU,gCAAf,UACwB,IAArB2F,EAAUjD,QAAgB,mBAAG1C,UAAU,OAAb,2BAE1B2F,EAAUhD,KAAI,SAACQ,EAAUN,GACxB,OACEM,EAAS8B,MAAMvC,OAAS,GACtB,sBACE1C,UAAS,eACPmD,EAASK,WAAa2E,GACF,QAApBA,EACI,gBACA,UALR,UASE,mBAAGnI,UAAU,uBAAb,SAAqCmD,EAASK,WAC9C,oBAAIxD,UAAU,yBACbmD,EAAS8B,MAAMtC,KAAI,SAACW,EAAMmF,GAAP,OAClB,cAAC,EAAD,CACEvF,OAAQhB,EACRmB,cAAeA,EACfF,SAAUG,GAHZ,oBAIoBmF,SAhBxB,wBAOwB5F,cCdvB6F,MA1Df,WACE,MAAkCnH,oBAAS,GAA3C,mBAAOoH,EAAP,KAAkBC,EAAlB,KAEMC,EAAa1D,EAAarB,WAEhC,EAA0BvC,mBAASsH,GAAnC,mBAAOrG,EAAP,KAAcsG,EAAd,KAmBA,OACE,sBAAK9I,UAAU,yCAAf,UACE,wBAAQA,UAAU,iDAAlB,SACE,sBAAKA,UAAU,OAAf,UACE,cAAC,IAAD,CAAkBA,UAAU,aAD9B,wBAKF,sBAAMA,UAAU,mBAAhB,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO+I,OAAK,EAACC,KAAK,aAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,kBAAlB,SACE,cAAC,EAAD,MAEF,eAAC,IAAD,CAAOA,KAAK,IAAZ,UACE,sBAAKhJ,UAAU,uBAAf,UACE,eAAC,EAAD,CAAQH,KAAK,UAAUD,aAAc,kBAAMgJ,GAAa,IAAxD,UAA+D,cAAC,IAAD,CAAY5I,UAAU,QAArF,kBACA,eAAC,EAAD,CAAQH,KAAK,QAAQD,aAAc,kBAxB/CuF,EAAagB,kBACb2C,EAAS,KAuBG,UAAuD,cAAC,IAAD,CAAW9I,UAAU,QAA5E,mBAEF,cAAC,EAAD,CAAcwC,MAAOA,EAAOC,kBAjCxC,SAAoBS,GAClB,IAAM+F,EAAe9D,EAAakB,WAAWnD,GAE7C4F,EAASG,gBAoCNN,GAAa,cAAC,EAAD,CAAc3H,aAAc,kBAAM4H,GAAa,IAAQtH,eA7CzE,SAAwB+D,GACtB,IAAM4D,EAAe9D,EAAaC,QAAQC,GAE1CyD,EAASG,UCfOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCfnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5J,SAAS6J,eAAe,SFuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBZ,MAAK,SAACa,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YElH5BrB,M","file":"static/js/main.7c86ba3b.chunk.js","sourcesContent":["import React, { SyntheticEvent } from \"react\";\n\ninterface ComponentProps {\n  children: React.ReactNode;\n  clickHandler?: (clickEvent: SyntheticEvent) => void;\n  type: string;\n}\n\nfunction Button({ children, clickHandler, type = \"default\" }: ComponentProps) {\n  const onClickHandler = clickHandler;\n\n  let buttonClasses =\n    \"flex items-start px-2 py-2 font-semibold border rounded-sm shadow-sm\";\n\n  switch (type) {\n    case \"success\":\n      buttonClasses += \" bg-green-500 border-green-600 text-gray-800\";\n      break;\n\n    case \"error\":\n      buttonClasses += \" bg-red-500 border-red-600 text-gray-200\";\n      break;\n\n    case \"primary\":\n      buttonClasses += \" bg-blue-500 border-blue-600 text-gray-200\";\n      break;\n\n    default:\n      break;\n  }\n\n  return (\n    <button className={buttonClasses} onClick={onClickHandler}>\n      {children ?? \"Click\"}\n    </button>\n  );\n}\n\nexport default Button;\n","import { useEffect } from \"react\";\n\nconst useOutsideClicked = (\n  ref: React.RefObject<HTMLDivElement>,\n  handler: () => void\n) => {\n  useEffect(() => {\n    function handleClickOutside(event: MouseEvent) {\n      if (ref.current && !ref.current.contains(event.target as Node)) {\n        handler();\n      }\n    }\n    // Bind the event listener\n    document.addEventListener(\"mousedown\", (event: MouseEvent) => {\n      if (ref.current && !ref.current.contains(event.target as Node)) {\n        handler();\n      }\n    });\n\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener(\"mousedown\", (event: MouseEvent) =>\n        handleClickOutside(event)\n      );\n    };\n  }, [ref, handler]);\n};\n\nexport default useOutsideClicked;\n","import { XIcon } from \"@heroicons/react/outline\";\nimport React, { useRef } from \"react\";\nimport useOutsideClicked from \"../hooks/useOutsideClicked\";\n\ninterface ComponentProps {\n  children: React.ReactNode;\n  modalTitle: string;\n  closeHandler: () => void;\n}\n\nfunction Modal({\n  children,\n  modalTitle = \"Modal Title\",\n  closeHandler,\n}: ComponentProps) {\n  const modalRef = useRef<HTMLDivElement>(null);\n\n  useOutsideClicked(modalRef, closeHandler);\n\n  return (\n    <div\n      className=\"absolute top-0 right-0 bottom-0 left-0 pt-10\"\n      style={{ backgroundColor: \"rgba(0,0,0,.4\" }}\n    >\n      <div\n        ref={modalRef}\n        className=\"bg-gray-300 w-5/6 mx-auto py-2 px-3 shadow-lg rounded-sm border-gray-400 border\"\n      >\n        <div className=\"flex justify-between items-center mb-2\">\n          <p className=\"font-bold\">{modalTitle}</p>\n          <XIcon className=\"w-5\" onClick={() => closeHandler()} />\n        </div>\n        {children}\n      </div>\n    </div>\n  );\n}\n\nexport default Modal;\n","import React, { SyntheticEvent, useEffect, useRef, useState } from \"react\";\nimport Button from \"../../global/Button\";\nimport Modal from \"../../global/Modal\";\n\ninterface ComponentProps {\n  closeHandler: () => void;\n  addListHandler: (listName: string) => void;\n}\n\nfunction AddListModal({ closeHandler, addListHandler }: ComponentProps) {\n  const [name, setName] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  function submitListHandler(event: SyntheticEvent) {\n    event.preventDefault();\n\n    if (!name) {\n      setErrorMessage(\"Please enter a name\");\n      return;\n    }\n\n    addListHandler(name);\n    closeHandler();\n  }\n\n  const newNameRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n      if (newNameRef.current !== null) {\n          newNameRef.current.focus();\n      }\n  }, []);\n\n  return (\n    <Modal closeHandler={closeHandler} modalTitle=\"Start new list\">\n      {errorMessage && (\n        <div className=\"px-2 py-1 mb-2 text-gray-50 bg-red-400\">\n          {errorMessage}\n        </div>\n      )}\n      <form onSubmit={submitListHandler}>\n        <div>\n          <label htmlFor=\"list_name\">List Name: </label>\n          <input\n            ref={newNameRef}\n            id=\"list_name\"\n            defaultValue={name}\n            onChange={(e) => setName(e.target.value)}\n            className=\"border border-gray-400 p-1 rounded-sm\"\n            type=\"text\"\n          />\n        </div>\n        <div className=\"flex justify-end mt-6\">\n          <Button type=\"success\" clickHandler={submitListHandler}>\n            Start List\n          </Button>\n        </div>\n      </form>\n    </Modal>\n  );\n}\n\nexport default AddListModal;\n","import React from \"react\";\nimport Button from \"../global/Button\";\nimport { Link } from \"react-router-dom\";\nimport {\n  PencilIcon,\n  ShoppingCartIcon,\n  TrashIcon,\n} from \"@heroicons/react/outline\";\nimport { IGroceryList } from \"../types/GroceryList\";\n\ninterface ComponentProps {\n  lists: IGroceryList[],\n  deleteListHandler: (listId: number) => void,\n}\n\nfunction GroceryLists({ lists, deleteListHandler }: ComponentProps) {\n  return (\n    <div>\n      <p className=\"font-bold text-lg mt-4\">\n        {lists.length > 0 ? \"Current Lists\" : \"No Lists Yet\"}\n      </p>\n\n      {lists.map((list, index) => {\n        return (\n          <div\n            className=\"flex justify-between items-center px-1 mb-8\"\n            key={`glist_${index}`}\n          >\n            <p>{list.name}</p>\n            <div className=\"flex space-x-2\">\n              <Button\n                type=\"error\"\n                clickHandler={() => deleteListHandler(list.id)}\n              >\n                <TrashIcon className=\"w-6\" />\n              </Button>\n\n              <Link to={`/lists/${list.id}`}>\n                <Button type=\"primary\">\n                  <PencilIcon className=\"w-6\" />\n                </Button>\n              </Link>\n\n              <Link to={`/lists/shop/${list.id}`}>\n                <Button type=\"success\">\n                  <ShoppingCartIcon className=\"w-6\" />\n                </Button>\n              </Link>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default GroceryLists;\n","import React, { useState } from 'react'\nimport { TrashIcon } from '@heroicons/react/outline'\nimport Button from '../../global/Button';\nimport { GroceryCategory, IGroceryListItem } from '../../types/IGroceryListItem';\n\ninterface ComponentProps {\n    listCategories: string[],\n    listId: number,\n    listItem: IGroceryListItem,\n    updateHandler: (updatedListId: number, item: IGroceryListItem) => void,\n    deleteHandler: (listItemId: number) => void,\n}\n\nfunction GroceryEditListItem({ listCategories, listId, listItem, deleteHandler, updateHandler }: ComponentProps) {\n    const [item, setItem] = useState(listItem.item ?? \"\");\n    const [category, setCategory] = useState<GroceryCategory>(listItem.category ?? \"Miscellaneous\");\n\n    function nameChangeHandler(itemName: string) {\n        setItem(itemName);\n        updateHandler(listId, { id: listItem.id, item: itemName, category, acquired: listItem.acquired });\n    }\n\n    function categoryChangeHandler(itemCategory: GroceryCategory) {\n        setCategory(itemCategory);\n        updateHandler(listId, { id: listItem.id, item, category: itemCategory, acquired: listItem.acquired })\n    }\n\n    return (\n        <div className=\"flex flex-col mb-2 item-row\">\n            <div className=\"flex mb-2\">\n                <div className=\"w-full\">\n                    <label className=\"font-bold\" htmlFor={`item_${listItem.id}`}>Item: </label>\n                    <input\n                        id={`item_${listItem.id}`}\n                        defaultValue={item}\n                        onChange={(e) => nameChangeHandler(e.target.value)}\n                        className=\"border border-gray-400 p-1 mt-1 rounded-sm w-full\"\n                        type=\"text\"\n                    />\n                </div>\n            </div>\n\n            <div className=\"flex justify-between space-x-2\">\n                <div className=\"text-sm\">\n                    <select\n                        name={`category_${listItem.id}`}\n                        id={`category_${listItem.id}`}\n                        className=\"border bg-gray-100 border-gray-400 p-1 mt-1 rounded-sm\"\n                        onChange={(e) => categoryChangeHandler(e.target.value as GroceryCategory)}\n                        value={category}\n                    >\n                        {listCategories.map((listCategory, index) => (\n                            <option key={`${listCategory}_${index}`} value={listCategory}>{listCategory}</option>\n                        ))}\n                    </select>\n                </div>\n                <Button type=\"error\" clickHandler={() => deleteHandler(listItem.id)}>\n                    <TrashIcon className=\"w-5\" />\n                </Button>\n            </div>\n        </div>\n    )\n}\n\nexport default GroceryEditListItem\n","export interface IGroceryListItem {\n    id: number,\n    item: string,\n    category: GroceryCategory,\n    acquired: boolean,\n}\n\nexport enum GroceryCategory {\n    Dairy = \"Dairy\",\n    DryCanGoods = \"Dry/Can Goods\",\n    Frozen = \"Frozen\",\n    Pantry = \"Pantry\",\n    Produce = \"Produce\",\n    Meat = \"Meat\",\n    Miscellaneous = \"Miscellaneous\",\n}","import { IGroceryList } from \"../types/GroceryList\";\nimport { GroceryCategory, IGroceryListItem } from \"../types/IGroceryListItem\";\n\nconst getLists = (): IGroceryList[] => {\n  let listKeys = Object.keys(localStorage).filter((list) =>\n    list.includes(\"list_\")\n  );\n\n  if (listKeys.length === 0) {\n    return [];\n  }\n\n  return listKeys\n    .map((listKey) => {\n      let rawData = localStorage.getItem(listKey) ?? \"{}\";\n\n      return JSON.parse(rawData);\n    })\n    .sort((a, b) => a.id - b.id);\n};\n\nconst getList = (id: number): IGroceryList => {\n  let rawData = localStorage.getItem(`list_${id}`) ?? \"{}\";\n\n  return JSON.parse(rawData);\n};\n\nconst addList = (listName: string) => {\n  const lists = getLists();\n\n  let newListId: number = 1;\n\n  if (lists.length > 0) {\n    // Get the last used id and add one\n    newListId =\n      lists\n        .map((list) => list.id)\n        .sort()\n        .splice(-1, 1)[0] + 1;\n  }\n\n  const newList: IGroceryList = {\n    id: newListId,\n    name: listName,\n    items: [],\n  };\n\n  localStorage.setItem(`list_${newListId}`, JSON.stringify(newList));\n\n  return getLists();\n};\n\nconst removeList = (listId: number) => {\n  localStorage.removeItem(`list_${listId}`);\n\n  return getLists();\n};\n\nconst updateList = (listId: number, listData: IGroceryList): IGroceryList => {\n  let list = getList(listId);\n\n  let newListObject = { ...list, ...listData };\n\n  newListObject.name = listData.name || list.name;\n  newListObject.items = listData.items || list.items;\n\n  localStorage.setItem(`list_${list.id}`, JSON.stringify(newListObject));\n\n  return newListObject;\n};\n\nconst clearLists = (): void => {\n  localStorage.clear();\n};\n\nconst addNewListItem = (listId: number) => {\n  let list = getList(listId);\n\n  let listItems = [...list.items];\n\n  listItems.push({\n    id: listItems.length + 1,\n    item: \"\",\n    acquired: false,\n    category: GroceryCategory.Miscellaneous,\n  });\n\n  list.items = listItems;\n\n  return updateList(listId, { ...list });\n};\n\nconst removeListItem = (listId: number, listItemId: number) => {\n  let list = getList(listId);\n\n  let listItems = [...list.items];\n\n  list.items = listItems.filter((listItem) => listItem.id !== listItemId);\n\n  return updateList(listId, { ...list });\n};\n\nconst updateListItem = (listId: number, updatedItem: IGroceryListItem) => {\n  const list = getList(listId);\n\n  const items = [...list.items];\n\n  const listItemIndex = items.findIndex((item) => item.id === updatedItem.id);\n\n  items[listItemIndex] = { ...items[listItemIndex], ...updatedItem };\n\n  list.items = items;\n\n  localStorage.setItem(`list_${list.id}`, JSON.stringify(list));\n\n  return list;\n};\n\nconst dataProvider = {\n  addList,\n  getLists,\n  getList,\n  removeListItem,\n  addNewListItem,\n  updateListItem,\n  updateList,\n  clearLists,\n  removeList,\n};\n\nexport default dataProvider;\n","import { GroceryCategory } from \"../types/IGroceryListItem\";\n\nconst getCategories = (): Array<string> => {\n  let types = [];\n\n  for (const value in GroceryCategory) {\n    types.push(value)\n  }\n\n  return types;\n};\n\nconst categoryDataProvider = {\n  getCategories,\n};\n\nexport default categoryDataProvider;\n","import React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router';\nimport { Link } from 'react-router-dom';\n\nimport { ChevronLeftIcon, PlusSmIcon, ArrowCircleUpIcon } from '@heroicons/react/outline'\nimport GroceryEditListItem from '../components/lists/GroceryEditListItem';\nimport Button from '../global/Button';\nimport dataProvider from '../data/dataProvider';\nimport categoryDataProvider from '../data/categoryDataProvider';\n\nimport { IGroceryListItem } from '../types/IGroceryListItem';\n\nfunction EditGroceryList() {\n    const { id } = useParams<{ id: string }>();\n    const listId = parseInt(id);\n\n    const [currentList, setCurrentList] = useState(dataProvider.getList(listId));\n    const [listItems, setListItems] = useState<IGroceryListItem[]>([]);\n    const [listCategories, setListCategories] = useState(categoryDataProvider.getCategories());\n\n    useEffect(() => {\n        if (currentList) {\n            setListItems([...currentList.items])\n        }\n    }, [currentList]);\n\n    useEffect(() => {\n        if (listItems.length > 1) {\n            const lastItemRow = document.querySelector('.item-row:last-child');\n\n            if (lastItemRow) {\n                lastItemRow.scrollIntoView({ behavior: \"smooth\" });\n            }\n        }\n    }, [listItems]);\n\n    if (!currentList) {\n        return null;\n    }\n\n\n    function addNewItemHandler() {\n        const updatedList = dataProvider.addNewListItem(listId);\n\n        setCurrentList(updatedList);\n        setListItems(updatedList.items);\n    }\n\n    function deleteHandler(itemId: number) {\n        const updatedList = dataProvider.removeListItem(listId, itemId);\n\n        setCurrentList(updatedList);\n        setListItems(updatedList.items);\n    }\n\n    function updateHandler(updatedListId: number, item: IGroceryListItem) {\n        const updatedList = dataProvider.updateListItem(updatedListId, item);\n\n        setCurrentList(updatedList);\n        setListItems(updatedList.items);\n    }\n\n    function backToTop() {\n        document.body.scrollIntoView({ behavior: \"smooth\" })\n    }\n\n    return (\n      <div>\n        <div className=\"flex items-center\">\n          <div className=\"w-1/6\">\n            <Link to=\"/\">\n              <ChevronLeftIcon className=\"w-6\" />\n            </Link>\n          </div>\n          <p className=\"font-bold text-xl flex-1\">{currentList.name}</p>\n        </div>\n\n        <div className=\"flex flex-col mt-5 mb-12 item-list\">\n          {listItems.length === 0 && <p className=\"mt-5\">No items yet.</p>}\n\n          {listItems.map((listItem, index) => (\n            <GroceryEditListItem\n              listCategories={listCategories}\n              listId={listId}\n              updateHandler={updateHandler}\n              deleteHandler={deleteHandler}\n              listItem={listItem}\n              key={`list_item_${index}`}\n            />\n          ))}\n        </div>\n        <div className=\"flex mt-8 justify-between fixed bottom-2 right-2 left-2\">\n          <Button type=\"primary\" clickHandler={backToTop}>\n            <ArrowCircleUpIcon className=\"w-5\" />\n          </Button>\n          <Button type=\"success\" clickHandler={addNewItemHandler}>\n            <PlusSmIcon className=\"w-5\" /> Add Item\n          </Button>\n        </div>\n      </div>\n    );\n}\n\nexport default EditGroceryList\n","import { ShoppingBagIcon } from \"@heroicons/react/outline\";\nimport React, { useState } from \"react\";\nimport Button from \"../../global/Button\";\n\ninterface CompontentProps {\n  listId: any,\n  listItem: any,\n  updateHandler: any,\n}\n\nfunction ShopGroceryListItem({ listId, listItem, updateHandler }: CompontentProps) {\n  const [item, setItem] = useState(listItem ?? \"\");\n\n  const [acquired, setAcquired] = useState(item.acquired ?? false);\n\n  function onChangeHandler() {\n    const acquiredStatus = !acquired;\n    setAcquired(acquiredStatus);\n    setItem({ ...item, acquired: acquiredStatus });\n    updateHandler(listId, { id: listItem.id, acquired: acquiredStatus });\n  }\n\n  let itemStyle: object = {\n    textDecoration: acquired ? \"line-through\" : null,\n    fontStyle: acquired ? \"italic\" : null,\n    color: acquired ? 'rgba(0,0,0,.5)' : null,\n  };\n\n  return (\n    <div\n      className=\"flex items-center space-x-3 mb-4\"\n      style={itemStyle}\n    >\n      <Button type=\"primary\" clickHandler={() => onChangeHandler()}>\n        <ShoppingBagIcon className=\"w-4\" />\n      </Button>\n      <p>\n        {item.quantity} {item.item}\n      </p>\n    </div>\n  );\n}\n\nexport default ShopGroceryListItem;\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { Link } from \"react-router-dom\";\n\nimport { ChevronLeftIcon } from \"@heroicons/react/outline\";\n\nimport dataProvider from \"../data/dataProvider\";\nimport ShopGroceryListItem from \"../components/lists/ShopGroceryListItem\";\nimport categoryDataProvider from \"../data/categoryDataProvider\";\nimport { IGroceryListItem } from \"../types/IGroceryListItem\";\nimport { IGroceryList } from \"../types/GroceryList\";\n\nfunction ShopGroceryList() {\n  const { id } = useParams<{ id: string }>();\n  const listId = parseInt(id);\n\n  const [currentList, setCurrentList] = useState(dataProvider.getList(listId));\n  const [listItems, setListItems] = useState<{category: string, items: IGroceryListItem[]}[]>([]);\n\n  const allCategories = categoryDataProvider.getCategories();\n\n  const [visibleCategory, setVisibleCategory] = useState(\"all\");\n\n  useEffect(() => {\n    if (currentList) {\n      formatGroceryListItems(currentList);\n    }\n  }, [currentList]);\n\n  function updateHandler(updateListId: number, item: IGroceryListItem) {\n    const updatedList = dataProvider.updateListItem(updateListId, item);\n\n    setCurrentList(updatedList);\n    formatGroceryListItems(updatedList);\n  }\n\n  function formatGroceryListItems(list: IGroceryList) {\n    const categories = allCategories;\n\n    const groceryItems: {category: string, items: IGroceryListItem[]}[] = categories.map((category) => ({\n      category,\n      items: list.items.filter((item) => item.category === category),\n    }));\n\n    setListItems(groceryItems);\n  }\n\n  return (\n    <div>\n      <div className=\"flex items-center\">\n        <div className=\"w-1/6\">\n          <Link to=\"/\">\n            <ChevronLeftIcon className=\"w-6\" />\n          </Link>\n        </div>\n        <p className=\"font-bold text-xl w-5/6\">Shopping {currentList.name}</p>\n      </div>\n      <div className=\"flex mt-4\">\n        <label className=\"pr-2 font-bold\" htmlFor=\"categories\">\n          Filter:\n        </label>\n        <select\n          className=\"bg-gray-200 shadow-sm py-1 pl-1\"\n          name=\"categories\"\n          id=\"categories\"\n          value={visibleCategory}\n          onChange={(e) => setVisibleCategory(e.target.value)}\n        >\n          <option value=\"all\">All</option>\n          {allCategories.map((cat, index) => (\n            <option value={cat} key={`category_${index}`}>\n              {cat}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div className=\"flex flex-col mb-12 item-list\">\n        {listItems.length === 0 && <p className=\"mt-5\">No items yet.</p>}\n\n        {listItems.map((listItem, index) => {\n          return (\n            listItem.items.length > 0 && (\n              <div\n                className={`pb-6 ${\n                  listItem.category === visibleCategory ||\n                  visibleCategory === \"all\"\n                    ? \"flex flex-col\"\n                    : \"hidden\"\n                }`}\n                key={`list_category_${index}`}\n              >\n                <p className=\"font-bold text-right\">{listItem.category}</p>\n                <hr className=\"border-gray-400 mb-2\" />\n                {listItem.items.map((item, index_2) => (\n                  <ShopGroceryListItem\n                    listId={id}\n                    updateHandler={updateHandler}\n                    listItem={item}\n                    key={`list_item_${index_2}`}\n                  />\n                ))}\n              </div>\n            )\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default ShopGroceryList;\n","import { useState } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nimport { PlusSmIcon, ShoppingCartIcon, TrashIcon } from '@heroicons/react/outline'\n\nimport Button from \"./global/Button\";\n\nimport AddListModal from \"./components/modals/AddListModal\";\nimport GroceryLists from \"./views/GroceryLists\";\nimport EditGroceryList from \"./views/EditGroceryList\";\nimport dataProvider from \"./data/dataProvider\";\nimport ShopGroceryList from \"./views/ShopGroceryList\";\n\nfunction App() {\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const savedLists = dataProvider.getLists();\n\n  const [lists, setLists] = useState(savedLists);\n\n  function addListHandler(listName: string) {\n    const updatedLists = dataProvider.addList(listName);\n\n    setLists(updatedLists);\n  }\n\n  function removeList(listId: number) {\n    const updatedLists = dataProvider.removeList(listId);\n\n    setLists(updatedLists);\n  }\n\n  function clearLists() {\n    dataProvider.clearLists();\n    setLists([]);\n  }\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-gray-300\">\n      <header className=\"w-full bg-gray-500 text-gray-50 py-3 px-2 h-12\">\n        <div className=\"flex\">\n          <ShoppingCartIcon className=\"w-5 mr-1\" />\n          Grocery List App\n        </div>\n      </header>\n      <main className=\"my-2 px-2 flex-1\">\n        <Router>\n          <Switch>\n            <Route exact path=\"/lists/:id\">\n              <EditGroceryList />\n            </Route>\n            <Route exact path=\"/lists/shop/:id\">\n              <ShopGroceryList />\n            </Route>\n            <Route path=\"/\">\n              <div className=\"flex justify-between\">\n                <Button type=\"success\" clickHandler={() => setModalOpen(true)}><PlusSmIcon className=\"w-5\" /> Create list</Button>\n                <Button type=\"error\" clickHandler={() => clearLists()}><TrashIcon className=\"w-5\" /> Clear All</Button>\n              </div>\n              <GroceryLists lists={lists} deleteListHandler={removeList} />\n            </Route>\n          </Switch>\n        </Router>\n      </main>\n\n      {modalOpen && <AddListModal closeHandler={() => setModalOpen(false)} addListHandler={addListHandler} />}\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from \"./reportWebVitals\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}